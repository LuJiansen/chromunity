library(rmarkdown)
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
setDTthreads(threads = 1
)
library(data.table)
setDTthreads(threads = 1)
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
library(rmarkdown)
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
this_synergy
this_synergy[order(p)]
this_sliding_chrom$binsets
(this_sliding_chrom$binsets) %Q% (bid == 5)
((this_sliding_chrom$binsets) %Q% (bid == 5)) %&% genes
((this_sliding_chrom$binsets) %Q% (bid == 5)) %&% genes
genes %&% ((this_sliding_chrom$binsets) %Q% (bid == 5)) 
genes %&% ((this_sliding_chrom$binsets) %Q% (bid == 2)) 
genes %&% ((this_sliding_chrom$binsets) %Q% (bid == 6)) 
((this_sliding_chrom$binsets) %Q% (bid == 5)) %&% (genes %Q% (gene_name == "MYC"))
((this_sliding_chrom$binsets) %Q% (bid == 6)) %&% (genes %Q% (gene_name == "MYC"))
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
 fit(annotated_back, maxit = 50)   
 fit(annotated_back, maxit = 10)   
annotated_chrom = sscore(annotated_chrom, model = back_model) 
head(annotated_chrom)

back_model = fit(annotated_back, maxit = 10)
annotated_chrom = sscore(annotated_chrom, model = back_model) 
head(annotated_chrom)

this_synergy = synergy(binsets = this_sliding_chrom$binsets, theta = back_model$model$theta,
                annotated.binsets = annotated_chrom, model = back_model)

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)

this_synergy
this_synergy[order(p)]
back_model$model$theta
annotated_back
unique(annotated_back$bid)
annotated_back[bid == 102]
this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1)
gr2dt(this_sliding_chrom$binsets )
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
q()
n
library(data.table)
setDTthreads(threads = 1)
library(rmarkdown)
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
gc()

this_gr = readRDS(system.file("extdata", "example_gr.rds", package = 'chromunity'))

this_gr = readRDS( "/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")



all_concatemers = unique(this_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = this_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = this_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx

this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1)

head(this_sliding_chrom$concatemers)

head(this_sliding_chrom$binsets)


frags = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/files/Nlaiii.frags.hg38.rds") %>% dt2gr()

gc5b = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/gc.38.rds")

cov_list = list(gc5b, frags)

names(cov_list) <- c("score:gc.cov", "interval:frag.cov")


gc_frag_cov = covariate(name = c("gc", "frag"), type = c("numeric", "interval"), field = c("score", NA), data = cov_list)

gc_frag_cov


annotated_chrom = annotate(binsets = this_sliding_chrom$binsets,
		   k = 5,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 3) 

library(data.table)
setDTthreads(threads = 1)
library(rmarkdown)
library(rtracklayer)
library(skitools)
library(chromunity)
library(MASS)


this_gr = readRDS(system.file("extdata", "example_gr.rds", package = 'chromunity'))

this_gr = readRDS( "/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")



all_concatemers = unique(this_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = this_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = this_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx

this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1)

this_sliding_chrom$binsets
asd = gr2dt(this_sliding_chrom$binsets)
asd
asd[, c := .N, by = bid]
asd
chromunity
asd
asd[bid == 1]
this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1, peak.thresh = 0.9)
asd = gr2dt(this_sliding_chrom$binsets)
asd[, c := .N, by = bid]
asd
asd[bid == 1]
2e6/1e5
this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 1e5, window.size = 2e6, mc.cores = 1)
this_gr = readRDS(system.file("extdata", "example_gr.rds", package = 'chromunity'))

this_gr = readRDS( "/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")



all_concatemers = unique(this_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = this_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = this_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx

this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1)

this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 2.5e4, window.size = 2e6, mc.cores = 1)
this_gr = readRDS(system.file("extdata", "example_gr.rds", package = 'chromunity'))

this_gr = readRDS( "/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")



all_concatemers = unique(this_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = this_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = this_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx

this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1)

asd = gr2dt(this_sliding_chrom$binsets)
asd[, c := .N, by = bid]
asd
asd[order(c)]
this_sliding_chrom

frags = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/files/Nlaiii.frags.hg38.rds") %>% dt2gr()

gc5b = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/gc.38.rds")

cov_list = list(gc5b, frags)

names(cov_list) <- c("score:gc.cov", "interval:frag.cov")


gc_frag_cov = covariate(name = c("gc", "frag"), type = c("numeric", "interval"), field = c("score", NA), data = cov_list)

gc_frag_cov


annotated_chrom = annotate(binsets = this_sliding_chrom$binsets,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 3) 

set.seed(198)
back_gr = gr2dt(dt2gr(background(binsets = this_sliding_chrom$binsets, n = 500,
                                 resolution = 5e4)))


upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_gr, c("seqnames", "start"))
back_gr = back_gr[!bid %in% back_gr[width < (5e4-1)]$bid]
back_gr = gr2dt(gr.reduce(dt2gr(back_gr), by = "bid"))
back_gr$bid <- as.factor(back_gr$bid)
back_gr = merge(back_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_gr = back_gr[end < V2][start < V2]
back_gr[, overall.cardinality := .N, by = bid]
back_gr = back_gr[overall.cardinality > 1]
back_gr = dt2gr(back_gr)


annotated_back = annotate(binsets = back_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 3) 
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
this_synergy[order(p)]
this_sliding_chrom$binsets
chromunity
si2gr(this_sliding_chrom)
si2gr(this_gr_training)
region =  si2gr(this_gr_training) 
window.size = 2e6
stride = window.size/2
windows
this_sliding_chrom$binsets
ads
asd
asd[bid == 1]
130350000-124850001
(130350000-124850001)/1e6
windows[[125]]
concatemers = this_gr_training; resolution = 5e4; region = si2gr(concatemers); windows = NULL; piecewise = TRUE; shave = FALSE; bthresh = 3; cthresh = 3; max.size = 2^31-1; subsample.frac = NULL; window.size = 2e6; max.slice = 1e6; min.support = 5; stride = window.size/2; mc.cores = 5; k.knn = 25; k.min = 5; pad = 1e3; peak.thresh = 0.85; seed = 42; verbose = TRUE
concatemers
is.null(concatemers$cid)
bins
concatemers
binmap
binmap[winind == 125]
binmap[winid == 125]
125000001-123000001
win == 125
win = 125
these.bins
concatemers %Q% (binid %in% these.bins$binid)
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        
        cc = cc %>% do.call(grbind, .)
    }
piecewise
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        

    }
cc[[1]]
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        

    }
cc[[1]]
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        

    }
source("/gpfs/commons/home/adeshpande/git/chromunity/R/chromunity.R")
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        

    }
cc[[1]]
import::from(Matrix, sparseMatrix)
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        

    }
cc[[1]]
cc[[2]]
cc
cc %Q% (chid == 1)
cc
q()
n
library(data.table)
setDTthreads(threads = 1)
library(rmarkdown)
install_github("mskilab/chromunity",  ref = "addy_alpha")   
library(devtools)
install_github("mskilab/chromunity",  ref = "addy_alpha")   
2
install_github("mskilab/chromunity",  ref = "addy_alpha")   
3
getwd()
check()
document()
check()
test()
concatemers= example_gr; resolution = 1e5; region = si2gr(concatemers); windows = NULL; piecewise = TRUE; shave = FALSE; bthresh = 3; cthresh = 3; max.size = 2^31-1; subsample.frac = NULL; window.size = 5e6; max.slice = 1e6; min.support = 5; stride = window.size/2; mc.cores = 5; k.knn = 25; k.min = 5; pad = 1e3; peak.thresh = 0.85; seed = 42; verbose = TRUE
windows
example_gr
4448896-4313520
concatemers
binmaps
binmap
concatemer_communities
cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        
cc[[1]]
cc
length(cc)
uchid
this.chid = 1
library(skitools)
binset

  binsets = pbmclapply(uchid, mc.cores = mc.cores, function(this.chid)
  {
    suppressWarnings({
      this.cc = cc %Q% (chid == this.chid)
      peaks = gr.sum(this.cc + pad) %>% gr.peaks('score')
      binset = bins[, c()] %&% (peaks[peaks$score > quantile(peaks$score, peak.thresh)])
      if (length(binset))
      {
        binset$chid = this.chid
        binset$winid = this.cc$winid[1]
      }
    })
    binset
  })  %>% do.call(grbind, .)
binsets
test()
this.chrom = chromunity(concatemers = example_gr, resolution = 1e5, window.size = 5e6, mc.cores = 2)
class(this.chrom)
binsets = example_chrom$binsets
 concatemers = example_chrom$concatemers
binsets= example_chrom$binsets; concatemers= example_chrom$concatemers; covariates = NULL; k = 5; interchromosomal.dist = 1e8; interchromosomal.table = NULL; gg = NULL; mc.cores = 5; numchunks = 200*mc.cores-1; seed = 42; verbose = TRUE; unique.per.setid = TRUE; resolution = 1e5
binsets
bindist
sub.binsets = gr2dt(binsets)[, powerset(binid, 1, k), by = bid] %>% setnames(c('bid', 'setid', 'binid')) %>% setkey(bid)
  sub.binsets[, ":="(iid = 1:.N, tot = .N), by = .(setid, bid)] ## label each item in each sub-binset, and total count will be useful below

  if (verbose) smessage('Made ', nrow(sub.binsets), ' sub-binsets')

  ## first use ov to count how many concatemers fully overlap all the bins in the subbinset
  if (verbose) smessage('Counting concatemers across sub-binsets across ', mc.cores, ' cores')
  ref.counts = unique(sub.binsets[, .(bid, setid)])[, count := 0]
  if (nrow(ov))
    {
      ubid = unique(sub.binsets$bid) ## split up to lists to leverage pbmclapply
      ubidl = split(ubid, ceiling(runif(length(ubid))*numchunks)) ## randomly chop up ubid into twice the number of mc.coreso
      counts = pbmclapply(ubidl, mc.cores = mc.cores, function(bids)
      {
          out = tryCatch(merge(sub.binsets[.(as.factor(bids)), ], ov[bid %in% bids], by = c('binid', 'bid'), allow.cartesian = TRUE), error = function(e) NULL)
        if (!is.null(out) & nrow(out) > 0){
            if (unique.per.setid){
                out = out[, .(binid, bid, setid, iid, tot, cid)]
                this.step1 = out[, .(hit = all(1:tot[1] %in% iid)), by = .(cid, setid, bid, tot)][hit == TRUE]
                setkeyv(this.step1, c("bid", "cid", "tot"))
                this.step1 = this.step1[, tail(.SD, 1), by = .(cid, bid)]
                this.counts = this.step1[, .(count = sum(hit, na.rm = TRUE)), by = .(setid, bid)]
                this.counts = merge(ref.counts[bid %in% bids], this.counts, by = c("bid", "setid"), all.x = T)
                this.counts[, count := sum(count.x, count.y, na.rm = T), by = .(bid, setid)][, .(bid, setid, count)]
            } else {
                out[, .(hit = all(1:tot[1] %in% iid)), by = .(cid, setid, bid)][, .(count = sum(hit, na.rm = TRUE)), by = .(setid, bid)]
            }
        } else {
            NULL
        }
      })  %>% rbindlist
    }
 
out
counts
ubidl
sub.binsets
dists = pbmclapply(ubidl, mc.cores = mc.cores, function(bids)
  {
      this.sub.binsets = sub.binsets[bid %in% bids]
      this.dists = this.sub.binsets[, bindist[as.data.table(expand.grid(i = binid, j = binid))[i<j, ], .(dist = c('min.dist',  'max.dist'), value = quantile(distance+1,  c(0, 1)))], by = .(setid, bid)] %>% dcast(bid + setid ~ dist, value.var = 'value')
      })
dists[[1]]
mc.cores = 1
dists = pbmclapply(ubidl, mc.cores = mc.cores, function(bids)
  {
      this.sub.binsets = sub.binsets[bid %in% bids]
      this.dists = this.sub.binsets[, bindist[as.data.table(expand.grid(i = binid, j = binid))[i<j, ], .(dist = c('min.dist',  'max.dist'), value = quantile(distance+1,  c(0, 1)))], by = .(setid, bid)] %>% dcast(bid + setid ~ dist, value.var = 'value')
      })
dists
dists = pbmclapply(ubidl, mc.preschedule = FALSE, mc.cores = mc.cores, function(bids)
  {
      this.sub.binsets = sub.binsets[bid %in% bids]
      this.dists = this.sub.binsets[, bindist[as.data.table(expand.grid(i = binid, j = binid))[i<j, ], .(dist = c('min.dist',  'max.dist'), value = quantile(distance+1,  c(0, 1)))], by = .(setid, bid)] %>% dcast(bid + setid ~ dist, value.var = 'value')
      })
dists
dists = pbmclapply(ubidl, mc.preschedule = FALSE, mc.cores = 1, function(bids)
  {
      this.sub.binsets = sub.binsets[bid %in% bids]
      this.dists = this.sub.binsets[, bindist[as.data.table(expand.grid(i = binid, j = binid))[i<j, ], .(dist = c('min.dist',  'max.dist'), value = quantile(distance+1,  c(0, 1)))], by = .(setid, bid)] %>% dcast(bid + setid ~ dist, value.var = 'value')
      })
dists
bids
ubidl[[1]]
bids = 4
this.sub.binsets = sub.binsets[bid %in% bids]     
this.sub.binsets
this.dists = this.sub.binsets[, bindist[as.data.table(expand.grid(i = binid, j = binid))[i<j, ], .(dist = c('min.dist',  'max.dist'), value = quantile(distance+1,  c(0, 1)))], by = .(setid, bid)] %>% dcast(bid + setid ~ dist, value.var = 'value')
this.dists
this.sub.binsets
dists = pbmclapply(ubidl, mc.preschedule = FALSE, mc.cores = 1, function(bids)
  {
      this.sub.binsets = sub.binsets[bid %in% bids]
      this.dists = this.sub.binsets[, bindist[as.data.table(expand.grid(i = binid, j = binid))[i<j, ], .(dist = c('min.dist',  'max.dist'), value = quantile(distance+1,  c(0, 1)))], by = .(setid, bid)] %>% dcast(bid + setid ~ dist, value.var = 'value')
dists = pbmclapply(ubidl, mc.cores = mc.cores, function(bids)
  {
      this.sub.binsets = sub.binsets[bid %in% bids]
      this.dists = this.sub.binsets[, bindist[as.data.table(expand.grid(i = binid, j = binid))[i<j, ], .(dist = c('min.dist',  'max.dist'), value = quantile(distance+1,  c(0, 1)))], by = .(setid, bid)] %>% dcast(bid + setid ~ dist, value.var = 'value')
      print(bids)
      })
dists = mclapply(ubidl, mc.cores = 1, function(bids)
dists = mclapply(ubidl, mc.cores = 1, function(bids)
  {
      this.sub.binsets = sub.binsets[bid %in% bids]
      this.dists = this.sub.binsets[, bindist[as.data.table(expand.grid(i = binid, j = binid))[i<j, ], .(dist = c('min.dist',  'max.dist'), value = quantile(distance+1,  c(0, 1)))], by = .(setid, bid)] %>% dcast(bid + setid ~ dist, value.var = 'value')
      print(bids)
      })
bids = 11
this.sub.binsets
bids = 12
this.sub.binsets
sub.binsets
sub.binsets[tot == 1]
binsets
binsets %Q% (bid == 9)
example_chrom$binsets
example_chrom$binsets %Q% (bid == 9)   
asd = example_chrom$binsets 
asd[, c := .N, by = bid]
asd = dt2gr(example_chrom$binsets )
asd = gr2dt(example_chrom$binsets )
asd
asd[, c := .N, by = bid]
asd[c > 1]
asd = asd[c > 1]
binsets
this.annotate
test()
test()
binsets; concatemers = example_chrom$concatemers; background.binsets = NULL; model = NULL; covariates = NULL; annotated.binsets = NULL; k = 5; gg = NULL; mc.cores = 5; verbose = TRUE; resolution = 1e5; maxit = 10
binsets
binsets = binsets
binsets
binsets
binsets
binsets = binsets
inherits(binsets, 'GRanges')
background.binsets
annotated.background.binsets
mode;l
model
annotated.binsets
annotated.binsets = example_annot
annotated.binsets
scored.binsets
res
test()
check()
check()
install_github("mskilab/chromunity",  ref = "addy_alpha")   
3
q()
n

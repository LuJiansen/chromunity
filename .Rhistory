
all_concatemers = unique(chr8_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr8_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr8_parq_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training
chromunity
this_re_chrom = chromunity(concatemers = this_gr_training, piecewise = FALSE, shave = TRUE, resolution = 1e4, mc.cores = 1)
this_re_chrom

chr8_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.rds")

chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

resolution = 5e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

chr8_parq_gr = chr8_parq_gr %&% targets_EP

all_concatemers = unique(chr8_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr8_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr8_parq_gr %Q% (read_idx %in% testing_concatemers)

this_re_chrom = chromunity(concatemers = this_gr_training, piecewise = FALSE, shave = TRUE, resolution = 5e4, mc.cores = 1)
this_re_chrom
asd = dt2gr(this_re_chrom$binsets)
asd = gr2dt(this_re_chrom$binsets)
asd[, c := .N, by = bid]
asd
unique(asd[, .(bid, c)])
unique(asd[, .(bid, c)])[order(c, decreasing = T)]
gc_frag_cov

annotated_chrom = annotate(binsets = this_re_chrom$binsets,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 3) 


this_re_chrom$binsets
this_gr_testing
annotate
chr8_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.rds")

chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

resolution = 5e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

chr8_parq_gr = chr8_parq_gr %&% targets_EP

all_concatemers = unique(chr8_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr8_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr8_parq_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx


this_re_chrom = chromunity(concatemers = this_gr_training, piecewise = FALSE, shave = TRUE, resolution = 5e4, mc.cores = 1)

gc()
annotated_chrom = annotate(binsets = this_re_chrom$binsets,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 3) 
annotated_chrom

set.seed(198)
back_gr = gr2dt(dt2gr(background(binsets = this_re_chrom$binsets, n = 1000,
                                 resolution = 5e4)))

upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_gr, c("seqnames", "start"))
back_gr = back_gr[!bid %in% back_gr[width < (5e4-1)]$bid]
back_gr = gr2dt(gr.reduce(dt2gr(back_gr), by = "bid"))
back_gr$bid <- as.factor(back_gr$bid)
back_gr = merge(back_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_gr = back_gr[end < V2][start < V2]
back_gr[, overall.cardinality := .N, by = bid]
back_gr = back_gr[overall.cardinality > 1]
back_gr = dt2gr(back_gr)

> > > >
back_gr

set.seed(198)
back_gr = gr2dt(dt2gr(background(binsets = this_re_chrom$binsets, n = 1000,
                                 resolution = 5e4)))
back_gr
annotated_back = annotate(binsets = back_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 3) 
annotated_back = annotated_back[!bid %in% annotated_back[, .(sum(count)), by = bid][V1 == 0]$bid]
back_model = fit(annotated_back)
back_model = fit(annotated_back)

annotated_chrom = sscore(annotated_chrom, model = back_model) 
head(annotated_chrom)

back_model
this_synergy = synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_chrom, model = back_model)
this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)      
this_synergy[order(p)]
head(this_synergy[order(p)])    
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
gc()
final.1.parq
this_synergy
this_synergy = na.omit(this.synergy)
this_synergy = na.omit(this_synergy)
this_synergy
this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)  
this_synergy[order(p)]

this_synergy = synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model)

this_synergy[order(p)]
this_synergy = na.omit(this_synergy)
this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)  
this_synergy[order(p)]
this_synergy[order(p)][order(estimate, decreasing = T)]
this_synergy[fdr < 0.1][order(estimate, decreasing = T)]
this_synergy[fdr < 0.2][order(estimate, decreasing = T)]
this_synergy[fdr < 0.3][order(estimate, decreasing = T)]
back_model = fit(annotated_back)
annotated_re_chrom = sscore(annotated_re_chrom, model = back_model) 
head(annotated_re_chrom)

this_synergy = synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model)
this_synergy
this_synergy = na.omit(synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model))

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)
this_synergy[fdr < 0.1][order(estimate, decreasing = T)]
this_synergy[order(estimate, decreasing = T)]
this_synergy[order(p)]
gc()
this.chr1
this.chr1.gr
this.chr1.gr
gc()
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
chr1_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr1.single.run.sub.rds") 
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
gc()
this.chr2.gr
rm(this.chr2.gr)
rm(this.chr1.gr)
rm(final.1.parq)
gc()
chr2_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr2.single.run.sub.rds")

chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

resolution = 5e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

chr2_parq_gr = chr2_parq_gr %&% targets_EP

all_concatemers = unique(chr2_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr2_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr2_parq_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx


chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

resolution = 1e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

chr2_parq_gr = chr2_parq_gr %&% targets_EP

all_concatemers = unique(chr2_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr2_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr2_parq_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx


gc()
this_re_chrom = chromunity(concatemers = this_gr_training, piecewise = FALSE, shave = TRUE, resolution = 1e4, mc.cores = 1)
this_re_chrom
chromunity

chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

resolution = 5e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

chr2_parq_gr = chr2_parq_gr %&% targets_EP

all_concatemers = unique(chr2_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr2_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr2_parq_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx


this_re_chrom = chromunity(concatemers = this_gr_training, piecewise = FALSE, shave = TRUE, resolution = 5e4, mc.cores = 1)


annotated_re_chrom = annotate(binsets = this_re_chrom$binsets,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 5) 
annotated_re_chrom


head(annotated_re_chrom)
back_re_gr = gr2dt(dt2gr(background(binsets = this_re_chrom$binsets, n = 1000,
                                 resolution = 5e4)))


upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_re_gr, c("seqnames", "start"))
back_re_gr = back_re_gr[!bid %in% back_re_gr[width < (5e4-1)]$bid]
back_re_gr = gr2dt(gr.reduce(dt2gr(back_re_gr), by = "bid"))
back_re_gr$bid <- as.factor(back_re_gr$bid)
back_re_gr = merge(back_re_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_re_gr = back_re_gr[end < V2][start < V2]
back_re_gr[, overall.cardinality := .N, by = bid]
back_re_gr = back_re_gr[overall.cardinality > 1]
back_re_gr = dt2gr(back_re_gr)

head(back_re_gr)

annotated_back = annotate(binsets = back_re_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 5) 
annotated_back = annotated_back[!bid %in% annotated_back[, .(sum(count)), by = bid][V1 == 0]$bid]
back_model = fit(annotated_back)
back_model

annotated_re_chrom = sscore(annotated_re_chrom, model = back_model) 
head(annotated_re_chrom)


this_synergy = na.omit(synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model))

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)

this_synergy[order(p)]
this_gr_training
this_gr_testing


chr2_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr2.single.run.sub.rds")

chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

resolution = 5e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

chr2_parq_gr = chr2_parq_gr %&% targets_EP

all_concatemers = unique(chr2_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr2_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr2_parq_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx


this_re_chrom = chromunity(concatemers = this_gr_training, piecewise = FALSE, shave = TRUE, resolution = 5e4, mc.cores = 1)

annotated_re_chrom = annotate(binsets = this_re_chrom$binsets,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 3) 

set.seed(198)
back_re_gr = gr2dt(dt2gr(background(binsets = this_re_chrom$binsets, n = 1000,
                                 resolution = 5e4)))


upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_re_gr, c("seqnames", "start"))
back_re_gr = back_re_gr[!bid %in% back_re_gr[width < (5e4-1)]$bid]
back_re_gr = gr2dt(gr.reduce(dt2gr(back_re_gr), by = "bid"))
back_re_gr$bid <- as.factor(back_re_gr$bid)
back_re_gr = merge(back_re_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_re_gr = back_re_gr[end < V2][start < V2]
back_re_gr[, overall.cardinality := .N, by = bid]
back_re_gr = back_re_gr[overall.cardinality > 1]
back_re_gr = dt2gr(back_re_gr)

annotated_back = annotate(binsets = back_re_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 3) 

annotated_back = annotated_back[!bid %in% annotated_back[, .(sum(count)), by = bid][V1 == 0]$bid]

 
back_model = fit(annotated_back)

annotated_re_chrom = sscore(annotated_re_chrom, model = back_model) 
head(annotated_re_chrom)


this_synergy = na.omit(synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model))

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)

this_synergy[order(p)]
gc()


chr2_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr2.single.run.sub.rds")

chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

resolution = 2.5e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

chr2_parq_gr = chr2_parq_gr %&% targets_EP

all_concatemers = unique(chr2_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr2_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr2_parq_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx


this_re_chrom = chromunity(concatemers = this_gr_training, piecewise = FALSE, shave = TRUE, resolution = 2.5e4, mc.cores = 5)

q()
n
library(data.table)
setDTthreads(1)
getDTthreads()
library(rtracklayer)
library(skitools)
library(chromunity)
library(MASS)

## Chr. 2 single run
chr2_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr2.single.run.sub.rds")

## getting E-P annotations
chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

## resolution of the pad
resolution = 2.5e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

## Targets
this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

## Subsample
chr2_parq_gr = chr2_parq_gr %&% targets_EP

## Subsampling concatemers
all_concatemers = unique(chr2_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr2_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr2_parq_gr %Q% (read_idx %in% testing_concatemers)

##
this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx


## Running Chromunity
this_re_chrom = chromunity(concatemers = this_gr_training, piecewise = FALSE, shave = TRUE, resolution = 2.5e4, mc.cores = 5)

this_re_chrom
asd = gr2dt(this_re_chrom$binsets)
asd[, c:= .N, by = binid]
asd[, c:= .N, by = bid]
asd[order(c)]

## Frag counts
frags = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/files/Nlaiii.frags.hg38.rds") %>% dt2gr()

## GC content
gc5b = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/gc.38.rds")

## 
cov_list = list(gc5b, frags)

## Specify what kind of covariate it is. Score will be aggregated over bins while the number of intervals will be calculated otherwise.
names(cov_list) <- c("score:gc.cov", "interval:frag.cov")


gc_frag_cov = covariate(name = c("gc", "frag"), type = c("numeric", "interval"), field = c("score", NA), data = cov_list)

gc_frag_cov


annotated_re_chrom = annotate(binsets = this_re_chrom$binsets,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 2.5e4,
		   mc.cores = 5) 
head(annotated_re_chrom)

set.seed(198)
back_re_gr = gr2dt(dt2gr(background(binsets = this_re_chrom$binsets, n = 1000,
                                 resolution = 2.5e4)))

## Adding few filters to remove outlier simulation, can be customized
## Remioving bins less than resolution and lying out of bounds

## Getting seqlengths of each chromosome
upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_re_gr, c("seqnames", "start"))
back_re_gr = back_re_gr[!bid %in% back_re_gr[width < (2.5e4-1)]$bid]
back_re_gr = gr2dt(gr.reduce(dt2gr(back_re_gr), by = "bid"))
back_re_gr$bid <- as.factor(back_re_gr$bid)
back_re_gr = merge(back_re_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_re_gr = back_re_gr[end < V2][start < V2]
back_re_gr[, overall.cardinality := .N, by = bid]
back_re_gr = back_re_gr[overall.cardinality > 1]
back_re_gr = dt2gr(back_re_gr)


annotated_back = annotate(binsets = back_re_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 2.5e4,
		   mc.cores = 3) 

## removig edge cases with no counts
annotated_back = annotated_back[!bid %in% annotated_back[, .(sum(count)), by = bid][V1 == 0]$bid]

back_model = fit(annotated_back)

annotated_re_chrom = sscore(annotated_re_chrom, model = back_model) 
head(annotated_re_chrom)


this_synergy = na.omit(synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model))

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)

this_synergy[order(p)]
this_re_chrom = chromunity(concatemers = this_gr_training, windows = targets_EP, piecewise = FALSE, shave = TRUE, resolution = 2.5e4, mc.cores = 5)
asd = gr2dt(this_re_chrom$binsets)
asd[, c:= .N, by = bid]
asd[order(c)]

## Chr. 2 single run
chr2_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr2.single.run.sub.rds")

## getting E-P annotations
chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

## resolution of the pad
resolution = 1e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

## Targets
this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

## Subsample
chr2_parq_gr = chr2_parq_gr %&% targets_EP

## Subsampling concatemers
all_concatemers = unique(chr2_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr2_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr2_parq_gr %Q% (read_idx %in% testing_concatemers)

##
this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx


## Running Chromunity
this_re_chrom = chromunity(concatemers = this_gr_training, windows = targets_EP, piecewise = FALSE, shave = TRUE, resolution = 1e4, mc.cores = 5)

this_re_chrom

## Chr. 2 single run
chr2_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr2.single.run.sub.rds")

## getting E-P annotations
chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

## resolution of the pad
resolution = 2.5e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

## Targets
this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

## Subsample
chr2_parq_gr = chr2_parq_gr %&% targets_EP

## Subsampling concatemers
all_concatemers = unique(chr2_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr2_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr2_parq_gr %Q% (read_idx %in% testing_concatemers)

##
this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx


## Running Chromunity
this_re_chrom = chromunity(concatemers = this_gr_training, windows = targets_EP, piecewise = FALSE, shave = TRUE, resolution = 2.5e4, mc.cores = 5)

gc()

## Frag counts
frags = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/files/Nlaiii.frags.hg38.rds") %>% dt2gr()

## GC content
gc5b = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/gc.38.rds")

## 
cov_list = list(gc5b, frags)

## Specify what kind of covariate it is. Score will be aggregated over bins while the number of intervals will be calculated otherwise.
names(cov_list) <- c("score:gc.cov", "interval:frag.cov")


gc_frag_cov = covariate(name = c("gc", "frag"), type = c("numeric", "interval"), field = c("score", NA), data = cov_list)

gc_frag_cov


annotated_re_chrom = annotate(binsets = this_re_chrom$binsets,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 2.5e4,
		   mc.cores = 5) 

set.seed(198)
back_re_gr = gr2dt(dt2gr(background(binsets = this_re_chrom$binsets, n = 1000,
                                 resolution = 2.5e4)))

## Adding few filters to remove outlier simulation, can be customized
## Remioving bins less than resolution and lying out of bounds

## Getting seqlengths of each chromosome
upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_re_gr, c("seqnames", "start"))
back_re_gr = back_re_gr[!bid %in% back_re_gr[width < (2.5e4-1)]$bid]
back_re_gr = gr2dt(gr.reduce(dt2gr(back_re_gr), by = "bid"))
back_re_gr$bid <- as.factor(back_re_gr$bid)
back_re_gr = merge(back_re_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_re_gr = back_re_gr[end < V2][start < V2]
back_re_gr[, overall.cardinality := .N, by = bid]
back_re_gr = back_re_gr[overall.cardinality > 1]
back_re_gr = dt2gr(back_re_gr)


annotated_re_back = annotate(binsets = back_re_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 2.5e4,
		   mc.cores = 5) 
head(annotated_re_back) 

back_model = fit(annotated_re_back)

annotated_re_chrom = sscore(annotated_re_chrom, model = back_model) 
head(annotated_re_chrom)

annotated_re_back
annotated_re_back = annotated_re_back[!bid %in% annotated_re_back[, .(sum(count)), by = bid][V1 == 0]$bid]
annotated_re_back

back_model = fit(annotated_re_back)

annotated_re_chrom = sscore(annotated_re_chrom, model = back_model) 
head(annotated_re_chrom)


this_synergy = na.omit(synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model))

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)

this_synergy[order(p)]

## Chr8 single run
chr8_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")

## getting E-P annotations
chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

## resolution of the pad
resolution = 2.5e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

## Targets
this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

## Subsample
chr8_parq_gr = chr8_parq_gr %&% targets_EP

## Subsampling concatemers
all_concatemers = unique(chr8_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr8_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr8_parq_gr %Q% (read_idx %in% testing_concatemers)

##
this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx


## Running Chromunity
this_re_chrom = chromunity(concatemers = this_gr_training, windows = targets_EP, piecewise = FALSE, shave = TRUE, resolution = 2.5e4, mc.cores = 5)

this_re_chrom

## Chr8 single run
chr8_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")

## getting E-P annotations
chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

## resolution of the pad
resolution = 5e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

## Targets
this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

## Subsample
chr8_parq_gr = chr8_parq_gr %&% targets_EP

## Subsampling concatemers
all_concatemers = unique(chr8_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr8_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr8_parq_gr %Q% (read_idx %in% testing_concatemers)

##
this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx


## Running Chromunity
this_re_chrom = chromunity(concatemers = this_gr_training, windows = targets_EP, piecewise = FALSE, shave = TRUE, resolution = 5e4, mc.cores = 5)

asd = gr2dt(this_re_chrom$binsets)
asd[, c:= .N, by = bid]
asd[order(c)]

annotated_re_chrom = annotate(binsets = this_re_chrom$binsets,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 5) 

set.seed(198)
back_re_gr = gr2dt(dt2gr(background(binsets = this_re_chrom$binsets, n = 1000,
                                 resolution = 5e4)))

## Adding few filters to remove outlier simulation, can be customized
## Remioving bins less than resolution and lying out of bounds

## Getting seqlengths of each chromosome
upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_re_gr, c("seqnames", "start"))
back_re_gr = back_re_gr[!bid %in% back_re_gr[width < (5e4-1)]$bid]
back_re_gr = gr2dt(gr.reduce(dt2gr(back_re_gr), by = "bid"))
back_re_gr$bid <- as.factor(back_re_gr$bid)
back_re_gr = merge(back_re_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_re_gr = back_re_gr[end < V2][start < V2]
back_re_gr[, overall.cardinality := .N, by = bid]
back_re_gr = back_re_gr[overall.cardinality > 1]
back_re_gr = dt2gr(back_re_gr)


annotated_re_back = annotate(binsets = back_re_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 5) 

back_model = fit(annotated_re_back)

annotated_re_chrom = sscore(annotated_re_chrom, model = back_model) 
head(annotated_re_chrom)


this_synergy = na.omit(synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model))

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)


this_synergy[order(p)]
annotated_re_back = annotated_re_back[!bid %in% annotated_re_back[, .(sum(count)), by = bid][V1 == 0]$bid]
 
back_model = fit(annotated_re_back)

annotated_re_chrom = sscore(annotated_re_chrom, model = back_model) 
head(annotated_re_chrom)


this_synergy = na.omit(synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model))

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)

head(this_synergy[order(p)])  

set.seed(198)
back_re_gr = gr2dt(dt2gr(background(binsets = this_re_chrom$binsets, n = 5000,
                                 resolution = 5e4)))

## Adding few filters to remove outlier simulation, can be customized
## Remioving bins less than resolution and lying out of bounds

## Getting seqlengths of each chromosome
upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_re_gr, c("seqnames", "start"))
back_re_gr = back_re_gr[!bid %in% back_re_gr[width < (5e4-1)]$bid]
back_re_gr = gr2dt(gr.reduce(dt2gr(back_re_gr), by = "bid"))
back_re_gr$bid <- as.factor(back_re_gr$bid)
back_re_gr = merge(back_re_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_re_gr = back_re_gr[end < V2][start < V2]
back_re_gr[, overall.cardinality := .N, by = bid]
back_re_gr = back_re_gr[overall.cardinality > 1]
back_re_gr = dt2gr(back_re_gr)

annotated_re_back = annotate(binsets = back_re_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 5)
annotated_re_back = annotated_re_back[!bid %in% annotated_re_back[, .(sum(count)), by = bid][V1 == 0]$bid]

back_model = fit(annotated_re_back)

annotated_re_chrom = sscore(annotated_re_chrom, model = back_model) 
head(annotated_re_chrom)


this_synergy = na.omit(synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model))

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)

head(this_synergy[order(p)])

set.seed(198)
back_re_gr = gr2dt(dt2gr(background(binsets = this_re_chrom$binsets, n = 500,
                                 resolution = 5e4)))

## Adding few filters to remove outlier simulation, can be customized
## Remioving bins less than resolution and lying out of bounds

## Getting seqlengths of each chromosome
upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_re_gr, c("seqnames", "start"))
back_re_gr = back_re_gr[!bid %in% back_re_gr[width < (5e4-1)]$bid]
back_re_gr = gr2dt(gr.reduce(dt2gr(back_re_gr), by = "bid"))
back_re_gr$bid <- as.factor(back_re_gr$bid)
back_re_gr = merge(back_re_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_re_gr = back_re_gr[end < V2][start < V2]
back_re_gr[, overall.cardinality := .N, by = bid]
back_re_gr = back_re_gr[overall.cardinality > 1]
back_re_gr = dt2gr(back_re_gr)

```{r, label='re annotate back', message=TRUE, warning=FALSE, results='hide'}

annotated_re_back = annotate(binsets = back_re_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 5) 

## removig edge cases with no counts
annotated_re_back = annotated_re_back[!bid %in% annotated_re_back[, .(sum(count)), by = bid][V1 == 0]$bid]


set.seed(198)
back_re_gr = gr2dt(dt2gr(background(binsets = this_re_chrom$binsets, n = 1000,
                                 resolution = 5e4)))

## Adding few filters to remove outlier simulation, can be customized
## Remioving bins less than resolution and lying out of bounds

## Getting seqlengths of each chromosome
upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_re_gr, c("seqnames", "start"))
back_re_gr = back_re_gr[!bid %in% back_re_gr[width < (5e4-1)]$bid]
back_re_gr = gr2dt(gr.reduce(dt2gr(back_re_gr), by = "bid"))
back_re_gr$bid <- as.factor(back_re_gr$bid)
back_re_gr = merge(back_re_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_re_gr = back_re_gr[end < V2][start < V2]
back_re_gr[, overall.cardinality := .N, by = bid]
back_re_gr = back_re_gr[overall.cardinality > 1]
back_re_gr = dt2gr(back_re_gr)


annotated_re_back = annotate(binsets = back_re_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 5) 

## removig edge cases with no counts
annotated_re_back = annotated_re_back[!bid %in% annotated_re_back[, .(sum(count)), by = bid][V1 == 0]$bid]

 
back_model = fit(annotated_re_back)

annotated_re_chrom = sscore(annotated_re_chrom, model = back_model) 
head(annotated_re_chrom)


this_synergy = na.omit(synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model))

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)
head(this_synergy[order(p)])
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
library(rmarkdown)
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
gc()
kill.zombies()

## Chr2 single run
chr2_parq_gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr2.single.run.sub.rds")

## getting E-P annotations
chain19to38 = rtracklayer::import.chain("~/DB/UCSC/hg19ToHg38.over.chain")
chmm_19 = import("/gpfs/commons/groups/imielinski_lab/DB/ENCODE/HMM/wgEncodeBroadHmmGm12878HMM.bed")
chmm = chmm_19 %>% rtracklayer::liftOver(chain19to38)%>% grl.unlist %Q% (!duplicated(grl.ix))
chmm_ep = dt2gr(gr2dt(chmm)[grepl("Promoter", name) | grepl("Enhancer", name)])

## resolution of the pad
resolution = 2.5e4
tiles = gr.tile(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), resolution)

## Targets
this_EP = (chmm_ep %Q% (grepl("Active_Promoter|Strong_Enhancer", name)))
targets_EP = gr.reduce(this_EP+resolution)

## Subsample
chr2_parq_gr = chr2_parq_gr %&% targets_EP

## Subsampling concatemers
all_concatemers = unique(chr2_parq_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = chr2_parq_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = chr2_parq_gr %Q% (read_idx %in% testing_concatemers)

##
this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx

this_re_chrom = chromunity(concatemers = this_gr_training, windows = targets_EP, piecewise = FALSE, shave = TRUE, resolution = 2.5e4, mc.cores = 5)

annotated_re_chrom = annotate(binsets = this_re_chrom$binsets,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 2.5e4,
		   mc.cores = 5) 


set.seed(198)
back_re_gr = gr2dt(dt2gr(background(binsets = this_re_chrom$binsets, n = 1000,
                                 resolution = 2.5e4)))

## Adding few filters to remove outlier simulation, can be customized
## Remioving bins less than resolution and lying out of bounds

## Getting seqlengths of each chromosome
upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_re_gr, c("seqnames", "start"))
back_re_gr = back_re_gr[!bid %in% back_re_gr[width < (2.5e4-1)]$bid]
back_re_gr = gr2dt(gr.reduce(dt2gr(back_re_gr), by = "bid"))
back_re_gr$bid <- as.factor(back_re_gr$bid)
back_re_gr = merge(back_re_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_re_gr = back_re_gr[end < V2][start < V2]
back_re_gr[, overall.cardinality := .N, by = bid]
back_re_gr = back_re_gr[overall.cardinality > 1]
back_re_gr = dt2gr(back_re_gr)


annotated_re_back = annotate(binsets = back_re_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 2.5e4,
		   mc.cores = 5) 

## removig edge cases with no counts
annotated_re_back = annotated_re_back[!bid %in% annotated_re_back[, .(sum(count)), by = bid][V1 == 0]$bid]

 
back_model = fit(annotated_re_back)

annotated_re_chrom = sscore(annotated_re_chrom, model = back_model) 
head(annotated_re_chrom)


this_synergy = na.omit(synergy(binsets = this_re_chrom$binsets,
                annotated.binsets = annotated_re_chrom, model = back_model))

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)



head(this_synergy[order(p)])

render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
q()
n

      windows = gr.start(gr.tile(region, stride))+window.size/2
      windows = dt2gr(gr2dt(windows)[, start := ifelse(start < 0, 1, start)])
  

  if (inherits(windows, 'GRanges'))
    windows = split(windows, 1:length(windows))

  if (is.null(concatemers$cid))
  {
      if ('read_idx' %in% names(values(concatemers)))
        names(values(concatemers))[match('read_idx', names(values(concatemers)))] = 'cid'
      else
        stop("concatemer GRanges must have metadata column $cid or $read_idx specifying the concatemer id")
  }
  
  params = data.table(k.knn = k.knn, k.min = k.min, seed = seed)

  if (!is.null(resolution)){
      bins = gr.tile(reduce(gr.stripstrand(unlist(windows))), resolution)[, c()]
  } else {
      bins = windows %>% unlist %>% gr.stripstrand %>% disjoin
  }
    
  if (verbose) cmessage('Generated ', length(bins), ' bins across ', length(windows), ' windows')

  if (verbose) cmessage('Matching concatemers with bins, and bins with windows using gr.match with max.slice ', max.slice, ' and ', mc.cores, ' cores')

  ## (batch) match up concatemers with binids
  concatemers$binid = gr.match(concatemers, bins, max.slice = max.slice, mc.cores =  mc.cores, verbose = verbose)

  ## maybe NA need to be removed
  concatemers = concatemers %Q% (!is.na(binid))

  ## match window ids and bins 
  binmap = bins %*% grl.unlist(windows)[, c('grl.ix')] %>% as.data.table %>% setnames('query.id', 'binid') %>% setnames('grl.ix', 'winid') %>% setkeyv('winid')

  ## cycle through (possibly complex) windows call cluster_concatemers and convert to gr.sums
  ## winids = unique(binmap$winid)
  winids = unique(binmap[binid %in% unique(concatemers$binid)]$winid)
  
  if (verbose) cmessage('Starting concatemer community detection across ', length(winids), ' windows')
  browser()

  if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        
        cc = cc %>% do.call(grbind, .)
    }
  else ## we shave 
  {
    if (shave)
    {
      if (verbose)
        cmessage('Shaving concatemers with bthresh = ', bthresh, ' and cthresh = ', cthresh)
      concatemers = shave_concatemers(concatemers, bthresh = bthresh, cthresh = cthresh, verbose = verbose)
    }

    ncat = concatemers$cid %>% unique %>% length
    nbin = concatemers$binid %>% unique %>% length

    if (verbose)
      cmessage(sprintf('Running concatemer communities with %s concatemers and %s bins', ncat, nbin))
    
    cc = concatemer_communities(concatemers, k.knn = k.knn, k.min = k.min, seed = seed, max.size = max.size, verbose = verbose, subsample.frac = subsample.frac)

    if (length(cc))
      cc = cc %Q% (support>=min.support)
  }
      
  if (!length(cc))
    return(Chrom(concatemers = GRanges(), binsets = GRanges(), meta = params))

  uchid = unique((cc %Q% (support >= min.support))$chid)

  if (verbose) cmessage('Analyzing gr.sums associated with ', length(uchid), ' concatemer communities to generate binsets')


  binsets = pbmclapply(uchid, mc.cores = mc.cores, function(this.chid)
  {
    suppressWarnings({
      this.cc = cc %Q% (chid == this.chid)
      peaks = gr.sum(this.cc + pad) %>% gr.peaks('score')
      binset = bins[, c()] %&% (peaks[peaks$score > quantile(peaks$score, peak.thresh)])
      if (length(binset))
      {
        binset$bid = this.chid
        binset$chid = this.chid  
        binset$winid = this.cc$winid[1]
        binset = gr.reduce(binset)
      }
    })
    binset
  })  %>% do.call(grbind, .)

  return(Chrom(concatemers = cc[cc$chid %in% binsets$chid], binsets = binsets, meta = params))
}


render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
n
ls()
ls()
n
n
q()
n
library(rmarkdown)     
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
names(this.sliding.chrom)                                                                                                     | ction-divs --table-of-contents --toc-depth 3 --variable toc_float=1 --variable toc_selectors=h1,h2,h3 --variable toc_collaps\
names(this.sliding.chrom)
names(this.chrom)
this.chrom
this.chrom$print
this.chrom
class(this.chrom)
this.chrom$concatemers
this.chrom$binsets
gr2dt(this.chrom$binsets)[order(bid)]
this.gr
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
library(rmarkdown)     
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
library(rmarkdown)     
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
this.gr = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.rds")
this.gr
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
library(rmarkdown)     
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
this.sliding.chrom$binsets
gr2dt(this.sliding.chrom$binsets)
this.sliding.chrom = chromunity(concatemers = this.gr.training, resolution = 1e5, window.size = 5e6, mc.cores = 1)
gr2dt(this.sliding.chrom$binsets)
library(rmarkdown)     
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
getDTthreads()
library(data.table)
getDTthreads()
setDTthreads(threads = 1)
library(rmarkdown)     
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
gr2dt(this.sliding.chrom$binsets)
this.gr
genes %Q% (gene_name == "MYC") 
genes %Q% (gene_name == "MYC") 
(genes %Q% (gene_name == "MYC") )+5e6
this.gr %&% (genes %Q% (gene_name == "MYC") )+5e6               
this.gr %&% (genes %Q% (gene_name == "MYC") )+1e7               
(genes %Q% (gene_name == "MYC") )+1e7  
this.gr
sort(this.gr)
this.gr %&% ((genes %Q% (gene_name == "MYC") )+1e7)               
this.gr %&% ((genes %Q% (gene_name == "MYC") )+5e6)               
this.gr %&% ((genes %Q% (gene_name == "MYC") )+2.5e6)               
this.sub.gr = this.gr %&% ((genes %Q% (gene_name == "MYC") )+2.5e6) 
saveRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")
saveRDS(this.sub.gr, "/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
gr2dt(this.sliding.chrom$binsets)
 (this.sliding.chrom$binsets) %&% ((genes %Q% (gene_name == "MYC") ) 
 (this.sliding.chrom$binsets) %&% ((genes %Q% (gene_name == "MYC") ) )
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
`>
gr2dt(dt2gr(background(binsets = this_sliding_chrom$binsets, n = 500,
                                 resolution = 1e5)))
upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 

setkeyv(back_dt, c("seqnames", "start"))
back_dt[, V1 := NULL]
back_dt = na.omit(back_dt)
back_dt = back_dt[!bid %in% back_dt[width < (resolution-1)]$bid]
back_dt = gr2dt(gr.reduce(dt2gr(back_dt), by = "bid"))
back_dt$bid <- as.factor(back_dt$bid)
back_dt = merge(back_dt, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_dt = back_dt[end < V2][start < V2]
back_dt[, overall.cardinality := .N, by = bid]
back_dt = back_dt[overall.cardinality > 1]

back_dt = gr2dt(dt2gr(background(binsets = this_sliding_chrom$binsets, n = 500,
                                 resolution = 1e5)))
back_dt
setkeyv(back_dt, c("seqnames", "start")) 
back_dt[, V1 := NULL] 
na.omit(back_dt) 
back_dt[!bid %in% back_dt[width < (resolution-1)]$bid]       
resolution
back_dt[!bid %in% back_dt[width < (1e5-1)]$bid] 
 gr2dt(gr.reduce(dt2gr(back_dt), by = "bid"))    
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
testing_concatemers
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
this_gr_testing
this_gr_testing
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
annotated_back[sum.counts == 0]
annotated_back
back_model = fit(annotated_back, maxit = 50)
back_model
back_model = fit(annotated_back, maxit = 500)
back_model = fit(annotated_back, maxit = 10)
back_model
length(unique(annotated_back$bid))
fit
annotated.binsets = annotated_back
covariates = setdiff(names(annotated.binsets), c("bid", "setid", 
        "mean.dist", "count"))
covariates
fmstring = paste("count ~", paste(paste0("log(", covariates, 
        ")", collapse = " + ")))
fmstring
fm = formula(fmstring) 
glm.nb(formula = fm, data = annotated.binsets, ontrol = glm.control(maxit = 50)
)
library(MASS)
glm.nb(formula = fm, data = annotated.binsets, ontrol = glm.control(maxit = 50))
glm.nb(formula = fm, data = annotated.binsets, control = glm.control(maxit = 50))
back_model = fit(annotated_back, maxit = 10)
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
back_model
 fit(annotated_back, maxit = 50)            
 fit(annotated_back, maxit = 500)            
glm.nb(formula = fm, data = annotated_back, control = glm.control(maxit = 50))      
annotated_back
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
back_model
summary(back_model$model)  
annotated_chrom
sscore(annotated_chrom, model = back_model)   
dflm(back_model$model)                
sscore
back_model$model$theta

this_synergy = synergy(binsets = this_sliding_chrom$binsets, theta = back_model$model$theta,
                annotated.binsets = annotated_chrom, model = back_model)

this_synergy
s.hcc$fdr = signif(p.adjust(s.hcc$p, "BH"), 2)
this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)
this_synergy
this_synergy[oder(fdr)]
this_synergy[order(fdr)]
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
fit(annotated_back, maxit = 50)
fit(annotated_back, maxit = 500)
fit(annotated_back, maxit = 5)
glm.nb(formula = fm, data = annotated_back, control = glm.control(maxit = 50))      
annotated_back
na.omit(annotated_back)
annotated_back[count > 0]
back_gr
back_gr %Q% (bid == 101)
upper.bound
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
glm.nb(formula = fm, data = annotated_back, control = glm.control(maxit = 50))      
glm.nb(formula = fm, data = annotated_back, control = glm.control(maxit = 500))      
glm.nb(formula = fm, data = annotated_back, control = glm.control(maxit = 5))      
fit(annotated_back, maxit = 50)  
fit(annotated_back, maxit = 10)  
fit(annotated_back, maxit = 20)  
fit(annotated_back, maxit = 30)  
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
fit(annotated_back, maxit = 10)            
fit
annotated.binsets = annotated_back
covariates = setdiff(names(annotated.binsets), c("bid", "setid","mean.dist", "count"))
fmstring = paste("count ~", paste(paste0("log(", covariates, ")", collapse = " + ")))
fm = formula(fmstring)
glm.nb(formula = fm, data = annotated.binsets,control = glm.control(maxit = 10)
)
glm.nb(formula = fm, data = annotated.binsets,control = glm.control(maxit = 15))
glm.nb(formula = fm, data = annotated.binsets,control = glm.control(maxit = 5))
annotated.binsets
annotated.binsets[count > 0]
back_gr
length(unique(back_gr$bid))
q()
n
library(rmarkdown)
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
setDTthreads(threads = 1
)
library(data.table)
setDTthreads(threads = 1)
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
library(rmarkdown)
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
this_synergy
this_synergy[order(p)]
this_sliding_chrom$binsets
(this_sliding_chrom$binsets) %Q% (bid == 5)
((this_sliding_chrom$binsets) %Q% (bid == 5)) %&% genes
((this_sliding_chrom$binsets) %Q% (bid == 5)) %&% genes
genes %&% ((this_sliding_chrom$binsets) %Q% (bid == 5)) 
genes %&% ((this_sliding_chrom$binsets) %Q% (bid == 2)) 
genes %&% ((this_sliding_chrom$binsets) %Q% (bid == 6)) 
((this_sliding_chrom$binsets) %Q% (bid == 5)) %&% (genes %Q% (gene_name == "MYC"))
((this_sliding_chrom$binsets) %Q% (bid == 6)) %&% (genes %Q% (gene_name == "MYC"))
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
 fit(annotated_back, maxit = 50)   
 fit(annotated_back, maxit = 10)   
annotated_chrom = sscore(annotated_chrom, model = back_model) 
head(annotated_chrom)

back_model = fit(annotated_back, maxit = 10)
annotated_chrom = sscore(annotated_chrom, model = back_model) 
head(annotated_chrom)

this_synergy = synergy(binsets = this_sliding_chrom$binsets, theta = back_model$model$theta,
                annotated.binsets = annotated_chrom, model = back_model)

this_synergy$fdr = signif(p.adjust(this_synergy$p, "BH"), 2)

this_synergy
this_synergy[order(p)]
back_model$model$theta
annotated_back
unique(annotated_back$bid)
annotated_back[bid == 102]
this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1)
gr2dt(this_sliding_chrom$binsets )
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
q()
n
library(data.table)
setDTthreads(threads = 1)
library(rmarkdown)
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
gc()

this_gr = readRDS(system.file("extdata", "example_gr.rds", package = 'chromunity'))

this_gr = readRDS( "/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")



all_concatemers = unique(this_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = this_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = this_gr %Q% (read_idx %in% testing_concatemers)

this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx

this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1)

head(this_sliding_chrom$concatemers)

head(this_sliding_chrom$binsets)


frags = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/files/Nlaiii.frags.hg38.rds") %>% dt2gr()

gc5b = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/gc.38.rds")

cov_list = list(gc5b, frags)

names(cov_list) <- c("score:gc.cov", "interval:frag.cov")


gc_frag_cov = covariate(name = c("gc", "frag"), type = c("numeric", "interval"), field = c("score", NA), data = cov_list)

gc_frag_cov


annotated_chrom = annotate(binsets = this_sliding_chrom$binsets,
		   k = 5,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 3) 

library(data.table)
setDTthreads(threads = 1)
library(rmarkdown)
library(rtracklayer)
library(skitools)
library(chromunity)
library(MASS)

## First using sliding window. Run separately for each chromosome

## This is demo GRange
this_gr = readRDS(system.file("extdata", "example_gr.rds", package = 'chromunity'))

this_gr = readRDS( "/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")


## Separate data into two halves, one to call communities and one for testing synergies

all_concatemers = unique(this_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = this_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = this_gr %Q% (read_idx %in% testing_concatemers)

##
this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx

##
this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1)

this_sliding_chrom$binsets
asd = gr2dt(this_sliding_chrom$binsets)
asd
asd[, c := .N, by = bid]
asd
chromunity
asd
asd[bid == 1]
this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1, peak.thresh = 0.9)
asd = gr2dt(this_sliding_chrom$binsets)
asd[, c := .N, by = bid]
asd
asd[bid == 1]
2e6/1e5
this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 1e5, window.size = 2e6, mc.cores = 1)
this_gr = readRDS(system.file("extdata", "example_gr.rds", package = 'chromunity'))

this_gr = readRDS( "/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")


## Separate data into two halves, one to call communities and one for testing synergies

all_concatemers = unique(this_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = this_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = this_gr %Q% (read_idx %in% testing_concatemers)

##
this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx

##
this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1)

this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 2.5e4, window.size = 2e6, mc.cores = 1)
## This is demo GRange
this_gr = readRDS(system.file("extdata", "example_gr.rds", package = 'chromunity'))

this_gr = readRDS( "/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/chr8.single.run.sub.rds")


## Separate data into two halves, one to call communities and one for testing synergies

all_concatemers = unique(this_gr$read_idx)
training_concatemers = sample(all_concatemers, length(all_concatemers)/2)
testing_concatemers = setdiff(all_concatemers, training_concatemers)

this_gr_training = this_gr %Q% (read_idx %in% training_concatemers)
this_gr_testing = this_gr %Q% (read_idx %in% testing_concatemers)

##
this_gr_training$cid = this_gr_training$read_idx
this_gr_testing$cid = this_gr_testing$read_idx

##
this_sliding_chrom = chromunity(concatemers = this_gr_training, resolution = 5e4, window.size = 2e6, mc.cores = 1)

asd = gr2dt(this_sliding_chrom$binsets)
asd[, c := .N, by = bid]
asd
asd[order(c)]
this_sliding_chrom

## Frag counts
frags = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/files/Nlaiii.frags.hg38.rds") %>% dt2gr()

## GC content
gc5b = readRDS("/gpfs/commons/groups/imielinski_lab/projects/PoreC/db/gc.38.rds")

## 
cov_list = list(gc5b, frags)

## Specify what kind of covariate it is. Score will be aggregated over bins while the number of intervals will be calculated otherwise.
names(cov_list) <- c("score:gc.cov", "interval:frag.cov")


gc_frag_cov = covariate(name = c("gc", "frag"), type = c("numeric", "interval"), field = c("score", NA), data = cov_list)

gc_frag_cov


annotated_chrom = annotate(binsets = this_sliding_chrom$binsets,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 3) 

set.seed(198)
back_gr = gr2dt(dt2gr(background(binsets = this_sliding_chrom$binsets, n = 500,
                                 resolution = 5e4)))

## Adding few filters to remove outlier simulation, can be customized
## Remioving bins less than resolution and lying out of bounds

## Getting seqlengths of each chromosome
upper.bound = as.data.table(hg_seqlengths(genome = "BSgenome.Hsapiens.UCSC.hg38::Hsapiens"), keep.rownames = T) 
setkeyv(back_gr, c("seqnames", "start"))
back_gr = back_gr[!bid %in% back_gr[width < (5e4-1)]$bid]
back_gr = gr2dt(gr.reduce(dt2gr(back_gr), by = "bid"))
back_gr$bid <- as.factor(back_gr$bid)
back_gr = merge(back_gr, upper.bound, by.x = "seqnames", by.y = "V1", all.x = T, allow.cartesian = T)
back_gr = back_gr[end < V2][start < V2]
back_gr[, overall.cardinality := .N, by = bid]
back_gr = back_gr[overall.cardinality > 1]
back_gr = dt2gr(back_gr)


annotated_back = annotate(binsets = back_gr,
		   k = 3,
		   concatemers = this_gr_testing,
		   covariates = gc_frag_cov, resolution = 5e4,
		   mc.cores = 3) 
render("/gpfs/commons/home/adeshpande/projects/PoreC/db/tutorial.Rmd", output_dir = "/gpfs/commons/projects/imielinski_web/adeshpande")
this_synergy[order(p)]
this_sliding_chrom$binsets
chromunity
si2gr(this_sliding_chrom)
si2gr(this_gr_training)
region =  si2gr(this_gr_training) 
window.size = 2e6
stride = window.size/2
windows
this_sliding_chrom$binsets
ads
asd
asd[bid == 1]
130350000-124850001
(130350000-124850001)/1e6
windows[[125]]
concatemers = this_gr_training; resolution = 5e4; region = si2gr(concatemers); windows = NULL; piecewise = TRUE; shave = FALSE; bthresh = 3; cthresh = 3; max.size = 2^31-1; subsample.frac = NULL; window.size = 2e6; max.slice = 1e6; min.support = 5; stride = window.size/2; mc.cores = 5; k.knn = 25; k.min = 5; pad = 1e3; peak.thresh = 0.85; seed = 42; verbose = TRUE
concatemers
is.null(concatemers$cid)
bins
concatemers
binmap
binmap[winind == 125]
binmap[winid == 125]
125000001-123000001
win == 125
win = 125
these.bins
concatemers %Q% (binid %in% these.bins$binid)
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        
        cc = cc %>% do.call(grbind, .)
    }
piecewise
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        

    }
cc[[1]]
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        

    }
cc[[1]]
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        

    }
source("/gpfs/commons/home/adeshpande/git/chromunity/R/chromunity.R")
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        

    }
cc[[1]]
import::from(Matrix, sparseMatrix)
if (piecewise)
    {
        ##cc = pbmclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        cc = mclapply(winids, mc.cores = mc.cores, mc.preschedule = TRUE, function(win)
        {
            ## print(win)
            suppressWarnings({
                these.bins = binmap[.(win), ]
                cc = concatemer_communities(concatemers %Q% (binid %in% these.bins$binid), k.knn = k.knn, max.size = max.size, k.min = k.min, seed = seed, verbose = verbose>1)
                if (length(cc))
                {
                    cc = cc[cc$support >= min.support] 
                    cc$winid = win
                }
            })
            cc
        })
        

    }
cc[[1]]
cc[[2]]
cc
cc %Q% (chid == 1)
cc
q()
n
